function mol2toxyz {
    file=$1
    
    # get file directory and move to it
    #
    #       if $FILE undefined this will return "."
    d=`dirname "$file"`
    pushd `pwd` > /dev/null
    cd $d


    # remove directory path
    f="${file##*/}"
    # extract file extension
    ext="${file##*.}"
    # remove file extension
    base="${f%.*}"

    #
    # generate an XYZ from a mol2 file
    #
    #	NOTE: this does NOT work correctly because the MOL2 file
    #	may have force field-specific atom names instead of the
    #	standard chemical atom name
    #
    if [ "$ext" != "mol2" ] ; then
        echo "input file must be a .mol2 file in Sybil MOL2 format"
        exit 1
    fi
    if [ ! -s $base.xyz ] ; then
        i=0
        while read no atom x y z typ n res charge ; do
            i=$((i + 1))
            echo "$atom    $x    $y    $z" >> $base.zyx
            printf "%s
        done < <( sed -n '/ATOM/,/BOND/ {/ATOM/d;/BOND/d;p}' $f )
        echo "$i" > $base.xyz
        echo "$base" >> $base.xyz
        cat $base.zyx >> $base.xyz
        #rm $base.zyx
    else
        echo "$base.xyz already exists, refusing to overwrite it"
    fi
}

function ergoSCF_update_mol2 {
    # this takes a charges file in sync with a mol2 file and adds charges to it.
    if [ -s $name.$GUESS.$BASIS.charges ] ; then
        # we have Mulliken charges computed
        babel -ixyz $FILE -omol2 $MOL2
        cp $MOL2 $MOL2.babel
        cat $name.$GUESS.$BASIS.charges | while read a b c d e i k charge ; do
            i=$((i + 1))
            echo $i $charge
            sed  -e "/ \+ $i .* 1  LIG/ s/\(.*\) LIG1.*/\1 OUT       $charge/"  $MOL2 > tmpFile.mol22
            mv tmpFile.mol2 $MOL2
        done
    fi
}

mol2toxyz $*
